/*
Solution Provider

Service that adds a solution to a message
*/

var amqp = require('amqp');
var connect = require('../connect');
var messageSolution = require('../message/solution');
var messageServiceStatus = require('../message/serviceStatus');

var config = connect.config;
var connection = connect.createConnection();
var MESSAGE_ORIGIN = 'nodejs-trace';

connection.on('error', function (e) {
  console.log('Error connecting the Solition Provider service', e);
});

// Wait for connection to become established.
connection.on('ready', function () {
  console.log('Connection ready');

  // Setup the exchange
  var exchange = connection.exchange(
    config.exchangeName
    , {type: 'fanout', durable: true, autoDelete: false/*, exclusive: false*/}
    , function (exchange) {
      console.log('Exchange ' + exchange.name + ' is open');
  });

  // Use the default 'amq.topic' exchange
  connection.queue(''
    , {exclusive: true/*, durable: true*/}
    , function (q) {
      console.log('Queue connected');

      q.bind(exchange, '', function() {
        console.log('Waiting for solutions on the '+ config.vhost + ' bus');
      });

      // Receive messages
      q.subscribe(function (message) {

        // transform data coming from messages generated by services written in other langs (eg. C# / Ruby)
        if(message.data) {
          message = JSON.parse(message.data.toString());
        }
        if(message.ttl <= 0) {
          return;
        }
        message.ttl--;
        if(message.solutions && message.solutions.length > 0) {
          return;
        }
        message.solutions = [messageSolution(MESSAGE_ORIGIN)];
        console.log('********** SOLUTION ***********', message);

        // Publish message back to the message broker
        exchange.publish('', message);  // '' = routing queue

      });
  });
});


// TODO: Abstract the start / stop / heartbeat messages into a service base-class/mixin
var serviceName = 'Solution provider';
var SERVICE_STATUS_START = 'start';
var SERVICE_STATUS_STOP = 'stop';
var SERVICE_STATUS_HEARTBEAT = 'heartbeat';

var serviceStart = function() {
  console.log('Starting service: '+serviceName);
  messageServiceStatus(SERVICE_STATUS_START, MESSAGE_ORIGIN);
}
var serviceStop = function() {
  console.log('Stopping service: '+serviceName);
  messageServiceStatus(SERVICE_STATUS_STOP, MESSAGE_ORIGIN);
}
var serviceHeartbeat = function() {
  console.log('Heartbeat: '+serviceName);
  messageServiceStatus(SERVICE_STATUS_HEARTBEAT);
}
